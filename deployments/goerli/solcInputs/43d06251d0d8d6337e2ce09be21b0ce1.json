{
  "language": "Solidity",
  "sources": {
    "contracts/FundMe.sol": {
      "content": "//SPDX-License-Identifier: MIT\r\n\r\npragma solidity ^0.8.0;\r\n\r\nimport \"./PriceConverter.sol\";\r\n\r\nerror Unauthorized();\r\n\r\ncontract FundMe {\r\n\r\n    using PriceConverter for uint256;\r\n\r\n    mapping (address => uint) public funderToFunded;\r\n    uint256 public constant MINIMUM_USD = 50 * 10e18;\r\n    address[] public funders;\r\n    address public immutable i_owner;\r\n    AggregatorV3Interface public priceFeed;\r\n\r\n    constructor(address priceFeedAddress){\r\n        priceFeed = AggregatorV3Interface(priceFeedAddress);\r\n        i_owner = msg.sender;\r\n    }\r\n\r\n    function fund() public payable{\r\n        require(msg.value.getConversionRate(priceFeed) >= MINIMUM_USD,\"Insufficient funds\");\r\n        funderToFunded[msg.sender] += msg.value;\r\n        funders.push(msg.sender);\r\n    }\r\n\r\n    modifier authorized {\r\n        if(msg.sender != i_owner) revert Unauthorized();\r\n        _;\r\n    }\r\n\r\n    function withdraw() public authorized{\r\n        for (uint256 _index = 0; _index < funders.length; _index++) {\r\n            funderToFunded[funders[_index]] = 0;\r\n        }\r\n        funders = new address[](0);\r\n        (bool transaction,) = payable(msg.sender).call{value : address(this).balance}(\"\");\r\n        require(transaction, \"Something went wrong with the transaction\");\r\n    }\r\n    receive() external payable{\r\n        fund();\r\n    }\r\n    fallback() external payable{\r\n        fund();\r\n    }\r\n}\r\n"
    },
    "contracts/PriceConverter.sol": {
      "content": "// SPDX-License-Identifier: MIT\r\npragma solidity ^0.8.0;\r\n\r\nimport \"@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol\";\r\n\r\nlibrary PriceConverter {\r\n    function getPrice(AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        // AggregatorV3Interface price = AggregatorV3Interface(0xD4a33860578De61DBAbDc8BFdb98FD742fA7028e);\r\n        (\r\n            /*uint80 roundId*/,\r\n            int256 answer,\r\n            /*uint256 startedAt*/,\r\n            /*uint256 updatedAt*/,\r\n            /*uint80 answeredInRound*/\r\n        ) = priceFeed.latestRoundData();\r\n\r\n        return uint256(answer * 1e10);\r\n    }\r\n    function getConversionRate(uint256 _amount, AggregatorV3Interface priceFeed) internal view returns(uint256){\r\n        uint256 rate = getPrice(priceFeed);\r\n        return (rate * _amount) / 10e18;\r\n    }\r\n}"
    },
    "@chainlink/contracts/src/v0.8/interfaces/AggregatorV3Interface.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity ^0.8.0;\n\ninterface AggregatorV3Interface {\n  function decimals() external view returns (uint8);\n\n  function description() external view returns (string memory);\n\n  function version() external view returns (uint256);\n\n  function getRoundData(uint80 _roundId)\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n\n  function latestRoundData()\n    external\n    view\n    returns (\n      uint80 roundId,\n      int256 answer,\n      uint256 startedAt,\n      uint256 updatedAt,\n      uint80 answeredInRound\n    );\n}\n"
    },
    "contracts/Lock.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity ^0.8.9;\n\n// Uncomment this line to use console.log\n// import \"hardhat/console.sol\";\n\ncontract Lock {\n    uint public unlockTime;\n    address payable public owner;\n\n    event Withdrawal(uint amount, uint when);\n\n    constructor(uint _unlockTime) payable {\n        require(\n            block.timestamp < _unlockTime,\n            \"Unlock time should be in the future\"\n        );\n\n        unlockTime = _unlockTime;\n        owner = payable(msg.sender);\n    }\n\n    function withdraw() public {\n        // Uncomment this line, and the import of \"hardhat/console.sol\", to print a log in your terminal\n        // console.log(\"Unlock time is %o and block timestamp is %o\", unlockTime, block.timestamp);\n\n        require(block.timestamp >= unlockTime, \"You can't withdraw yet\");\n        require(msg.sender == owner, \"You aren't the owner\");\n\n        emit Withdrawal(address(this).balance, block.timestamp);\n\n        owner.transfer(address(this).balance);\n    }\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": false,
      "runs": 200
    },
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    }
  }
}